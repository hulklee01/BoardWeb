<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:content="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/aop/spring-aop-4.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/tx/spring-tx-4.2.xsd">

    <content:component-scan base-package="com.springbook.biz"></content:component-scan>

    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

    <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
        <property name="userDAO" ref="userDAO"/>
    </bean>

    <bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO"/>

    <!-- DataSource 설정 -->
    <context:property-placeholder location="classpath:config/database.properties"/>
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- Transaction 설정 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- Spring JDBC 설정 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--<bean id="log" class="com.springbook.biz.common.AfterThrowingAdvice"></bean>-->
    <!--<bean id="before" class="com.springbook.biz.common.BeforeAdvice"></bean>-->
    <!--<bean id="after" class="com.springbook.biz.common.AfterAdvice"></bean>-->
    <!--<bean id="around" class="com.springbook.biz.common.AroundAdvice"></bean>-->
    <!--<bean id="return" class="com.springbook.biz.common.AfterReturningAdvice"></bean>-->
    <!--&lt;!&ndash; aop:config => 루트 엘리먼트 &ndash;&gt;-->
    <aop:config>
        <!-- aop:pointcut => 포인트컷 id, expression:필터 -->
        <aop:pointcut id="boardPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="boardPointcut"/>
        <!--<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))"/>-->
        <!-- aop:aspect => 포인트컷과 어드바이스의 연결 -->
        <!--<aop:aspect ref="before">-->
            <!--<aop:before pointcut-ref="allPointcut" method="beforeLog"/>-->
        <!--</aop:aspect>-->
        <!--<aop:aspect ref="log">-->
            <!--<aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog" throwing="exceptObj"/>-->
        <!--</aop:aspect>-->
        <!--<aop:aspect ref="after">-->
            <!--<aop:after pointcut-ref="allPointcut" method="finallyLog"/>-->
        <!--</aop:aspect>-->
        <!--<aop:aspect ref="return">-->
            <!--<aop:after-returning pointcut-ref="allPointcut" method="afterLog" returning="returnObj"/>-->
        <!--</aop:aspect>-->
        <!--<aop:aspect ref="around">-->
            <!--<aop:around pointcut-ref="allPointcut" method="aroundLog"/>-->
        <!--</aop:aspect>-->
    </aop:config>
</beans>